// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[CompilerGenerated]
public static class MVC {
    public static SimpleBlog.Web.Controllers.AccountController Account = new T4MVC_AccountController();
    public static SimpleBlog.Web.Controllers.AdminController Admin = new T4MVC_AdminController();
    public static SimpleBlog.Web.Controllers.ProjectsController Projects = new T4MVC_ProjectsController();
    public static SimpleBlog.Web.Controllers.StaticController Static = new T4MVC_StaticController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}


namespace SimpleBlog.Web.Controllers {
    public partial class AccountController {

        public AccountController() { }

        [CompilerGenerated]
        protected AccountController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Account";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string LogOn = "LogOn";
            public readonly string LogOff = "LogOff";
        }


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string LogOn = "LogOn";
        }
    }
}
namespace SimpleBlog.Web.Controllers {
    public partial class AdminController {

        public AdminController() { }

        [CompilerGenerated]
        protected AdminController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Admin";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
        }


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
        }
    }
}
namespace SimpleBlog.Web.Controllers {
    public partial class ProjectsController {

        [CompilerGenerated]
        protected ProjectsController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public ActionResult List() {
            return new T4MVC_ActionResult(Name, Actions.List);
        }

        [NonAction]
        public ActionResult Image() {
            return new T4MVC_ActionResult(Name, Actions.Image);
        }

        [NonAction]
        public ActionResult AddCategory() {
            return new T4MVC_ActionResult(Name, Actions.AddCategory);
        }

        [NonAction]
        public ActionResult DeleteCategory() {
            return new T4MVC_ActionResult(Name, Actions.DeleteCategory);
        }

        [NonAction]
        public ActionResult EditCategory() {
            return new T4MVC_ActionResult(Name, Actions.EditCategory);
        }

        [NonAction]
        public ActionResult RenameCategory() {
            return new T4MVC_ActionResult(Name, Actions.RenameCategory);
        }

        [NonAction]
        public ActionResult EditProject() {
            return new T4MVC_ActionResult(Name, Actions.EditProject);
        }

        [NonAction]
        public ActionResult ChangeProjectThumbnail() {
            return new T4MVC_ActionResult(Name, Actions.ChangeProjectThumbnail);
        }

        [NonAction]
        public ActionResult ChangeProjectImage() {
            return new T4MVC_ActionResult(Name, Actions.ChangeProjectImage);
        }


        [CompilerGenerated]
        public readonly string Name = "Projects";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
            public readonly string List = "List";
            public readonly string Image = "Image";
            public readonly string Admin = "Admin";
            public readonly string AddCategory = "AddCategory";
            public readonly string DeleteCategory = "DeleteCategory";
            public readonly string EditCategory = "EditCategory";
            public readonly string RenameCategory = "RenameCategory";
            public readonly string EditProject = "EditProject";
            public readonly string CreateProject = "CreateProject";
            public readonly string ChangeProjectThumbnail = "ChangeProjectThumbnail";
            public readonly string ChangeProjectImage = "ChangeProjectImage";
        }


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string Admin = "Admin";
            public readonly string CreateProject = "CreateProject";
            public readonly string EditCategory = "EditCategory";
            public readonly string EditProject = "EditProject";
            public readonly string List = "List";
        }
    }
}
namespace SimpleBlog.Web.Controllers {
    public partial class StaticController {

        public StaticController() { }

        [CompilerGenerated]
        protected StaticController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Static";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
            public readonly string Projects = "Projects";
        }


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
        }
    }
}
namespace T4MVC {
    public class SharedController {


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_AccountController: SimpleBlog.Web.Controllers.AccountController {
        public T4MVC_AccountController() : base(_Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult LogOn() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOn);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult LogOn(string password, bool rememberMe, string returnUrl) {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOn);
            callInfo.RouteValues.Add("password", password);
            callInfo.RouteValues.Add("rememberMe", rememberMe);
            callInfo.RouteValues.Add("returnUrl", returnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult LogOff() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOff);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_AdminController: SimpleBlog.Web.Controllers.AdminController {
        public T4MVC_AdminController() : base(_Dummy.Instance) { }

        public override System.Web.Mvc.RedirectToRouteResult Index() {
            var callInfo = new T4MVC_RedirectToRouteResult("Admin", Actions.Index);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_ProjectsController: SimpleBlog.Web.Controllers.ProjectsController {
        public T4MVC_ProjectsController() : base(_Dummy.Instance) { }

        public override System.Web.Mvc.RedirectToRouteResult Index() {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult List(int projectId) {
            var callInfo = new T4MVC_ViewResult("Projects", Actions.List);
            callInfo.RouteValues.Add("projectId", projectId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Image(int id) {
            var callInfo = new T4MVC_ActionResult("Projects", Actions.Image);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Admin() {
            var callInfo = new T4MVC_ViewResult("Projects", Actions.Admin);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult AddCategory(string name) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.AddCategory);
            callInfo.RouteValues.Add("name", name);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult DeleteCategory(int id) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.DeleteCategory);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditCategory(int id) {
            var callInfo = new T4MVC_ViewResult("Projects", Actions.EditCategory);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult RenameCategory(int id, string name) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.RenameCategory);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("name", name);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult EditProject(int id) {
            var callInfo = new T4MVC_ViewResult("Projects", Actions.EditProject);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult EditProject(int id, string name, string description, int categoryId) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.EditProject);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("name", name);
            callInfo.RouteValues.Add("description", description);
            callInfo.RouteValues.Add("categoryId", categoryId);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult CreateProject() {
            var callInfo = new T4MVC_ViewResult("Projects", Actions.CreateProject);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult CreateProject(string name, string description, int categoryId) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.CreateProject);
            callInfo.RouteValues.Add("name", name);
            callInfo.RouteValues.Add("description", description);
            callInfo.RouteValues.Add("categoryId", categoryId);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult ChangeProjectThumbnail(int id, System.Web.HttpPostedFileBase image) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.ChangeProjectThumbnail);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("image", image);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult ChangeProjectImage(int id, System.Web.HttpPostedFileBase image) {
            var callInfo = new T4MVC_RedirectToRouteResult("Projects", Actions.ChangeProjectImage);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("image", image);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_StaticController: SimpleBlog.Web.Controllers.StaticController {
        public T4MVC_StaticController() : base(_Dummy.Instance) { }

        public override System.Web.Mvc.RedirectToRouteResult Index() {
            var callInfo = new T4MVC_RedirectToRouteResult("Static", Actions.Index);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult Projects() {
            var callInfo = new T4MVC_RedirectToRouteResult("Static", Actions.Projects);
            return callInfo;
        }

    }

    [CompilerGenerated]
    public class _Dummy {
        private _Dummy() { }
        public static _Dummy Instance = new _Dummy();
    }
}

namespace System.Web.Mvc {
    [CompilerGenerated]
    public static class T4Extensions {
        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValues, formMethod, htmlAttributes);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return routes.MapRoute(name, url, result, (ActionResult)null);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            // Create and add the route
            var route = new Route(url, routeValues, new MvcRouteHandler());
            routes.Add(name, route);
            return route;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return ((IT4MVCActionResult)result).RouteValues;
        }

        public static void InitMVCT4Result(this IT4MVCActionResult result, string controller, string action) {
            result.Controller = controller;
            result.Action = action; ;
            result.RouteValues = new RouteValueDictionary();
            result.RouteValues.Add("Controller", controller);
            result.RouteValues.Add("Action", action);
        }
    }
}

[CompilerGenerated]
public interface IT4MVCActionResult {
    string Action { get; set; }
    string Controller { get; set; }
    RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string controller, string action): base()  {
        this.InitMVCT4Result(controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult {
    public T4MVC_RedirectToRouteResult(string controller, string action): base(" ", null)  {
        this.InitMVCT4Result(controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string controller, string action): base()  {
        this.InitMVCT4Result(controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}


namespace Links {
    [CompilerGenerated]
    public static class @Content {
        public static string Url() { return VirtualPathUtility.ToAbsolute("~/Content"); }
        public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Content/" + fileName); }
        public static readonly string back_button_png = Url("back_button.png");
        public static readonly string next_button_png = Url("next_button.png");
    }

    [CompilerGenerated]
    public static class @css {
        public static string Url() { return VirtualPathUtility.ToAbsolute("~/css"); }
        public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/css/" + fileName); }
        public static readonly string mvc_css = Url("mvc.css");
        public static readonly string projectsListing_css = Url("projectsListing.css");
        public static readonly string style_css = Url("style.css");
    }

}

#endregion T4MVC
#pragma warning restore 1591

